#!/usr/bin/python
# -*- coding: utf-8 -*-

# (c) 2019, Sumit Jaiswal (sjaiswal@redhat.com)
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

from __future__ import absolute_import, division, print_function

__metaclass__ = type


ANSIBLE_METADATA = {
    "metadata_version": "1.1",
    "status": ["preview"],
    "supported_by": "community",
}

DOCUMENTATION = """
---
module: anti_malware_config
short_description: Create a new antimalware under TrendMicro Deep Security Policy
description:
  - This module creates a new antimalware under TrendMicro Deep Security
version_added: "1.0.0"
options:
  name:
    description: Name of the anti-malware configuration. Searchable as String.
    required: true
    type: str
  description:
    description: Description of the anti-malware configuration. Searchable as String.
    required: false
    type: str
  scan_type:
    description: The type of malware scan configuration. Searchable as Choice.
    required: false
    choices: ["real-time", "on-demand"]
    type: str
  document_exploit_protection_enabled:
    description: Controls whether to scan for known critical vulnerabilities. Use true to enable scan.
    required: false
    type: bool
  document_exploit_protection:
    description: Scan for exploits against known critical vulnerabilities only. Searchable as Choice.
    required: false
    choices: ["critical-only", "critical-and-heuristic"]
    type: str
  document_exploit_heuristic_level:
    description: Controls whether to scan for exploits of known critical vulnerabilites as well as
    aggessively detect suspicious behaviour that could be an unknown exploit. Searchable as Choice.
    required: false
    choices: ["default", "default-and-agressive"]
    type: str
  machine_learning_enabled:
    description: Controls whether predictive machine learning is enabled. Set to true to enable.
    Searchable as Boolean.
    required: false
    type: bool
  behavior_monitoring_enabled:
    description: Controls whether to detect suspicious activity and unauthorized changes
    (including ransomware). Set to true to detect.
    Searchable as Boolean.
    required: false
    type: bool
  document_recovery_enabled:
    description: Controls whether to back up ransomware-encrypted files. Set to true to back up.
    Searchable as Boolean.
    required: false
    type: bool
  intelli_trap_enabled:
    description: Controls whether IntelliTrap is enabled. Set to true to enable. Searchable as Boolean.
    Searchable as Boolean.
    required: false
    type: bool
  memory_scan_enabled:
    description: Controls whether to scan process memory for malware. Use true to enable scan.
    Searchable as Boolean.
    required: false
    type: bool
  spyware_enabled:
    description: Controls whether to enable spyware/grayware protection. Set to true to enable.
    Searchable as Boolean.
    required: false
    type: bool	
  alert_enabled:
    description: Controls whether to create an alert when the Malware Scan Configuration logs an event.
    Set to true to enable the alert. Searchable as Boolean.
    required: false
    type: bool
  directories_to_scan:
    description: Specify if the scan will be peformed on all the directories or on a subset.
    Searchable as Choice.
    required: false
    choices: ["all-directories", "directory-list"]
    type: str
  directory_list_id:
    description: ID of the directory list to scan. Searchable as Numeric.
    required: false
    type: int	
  files_to_scan:
    description: Specify if scan will be performed on all files, a subset or by using IntelliScan.
    Searchable as Choice.
    required: false
    choices: ["all-files", "intelliscan-file-types", "file-extension-list"]
    type: str
  file_extension_list_id:
    description: ID of the file extension list to scan. Searchable as Numeric.
    required: false
    type: int
  excluded_directory_list_id:
    description: ID of the directory list to exclude from the scan. Searchable as Numeric.
    required: false
    type: int
  excluded_file_list_id:
    description: ID of the file list to exclude from the scan. Searchable as Numeric.
    required: false
    type: int
  excluded_file_extension_list_id:
    description: ID of the file extension list to exclude from the scan. Searchable as Numeric.
    required: false
    type: int
  excluded_process_image_file_list_id:
    description: ID of the process image file list to exclude from the scan. Searchable as Numeric.
    required: false
    type: int
  real_time_scan:
    description: Specify when to perform the real-time scan. Searchable as Choice.
    Searchable as Choice.
    required: false
    choices: ["read-only", "write-only", "read-write"]
    type: str
  scan_compressed_enabled	
    description: Controls whether to scan compressed files. Use true to enable scan.
    Searchable as Boolean.
    required: false
    type: bool
  scan_compressed_maximum_size:
    description: Maximum size of compressed files to scan, in MB. Searchable as Numeric.
    required: false
    type: int
  scan_compressed_maximum_levels:
    description: The maximum number of levels of compression to scan. Searchable as Numeric.
    required: false
    type: int
  scan_compressed_maximum_files:
    description: Maximum number of files to extract. Searchable as Numeric.
    required: false
    type: int
  microsoft_office_enabled:
    description: Controls whether to scan Embedded Microsoft Office Objects. Use true to enable scan.
    Searchable as Boolean.
    required: false
    type: bool
  microsoft_office_layers:
    description: Number of Microsoft Object Linking and Embedding (OLE) Layers to scan.
    Searchable as Numeric.
    required: false
    type: int
  network_directories_enabled:
    description: Controls whether to scan network directories. Set to true to enable.
    Searchable as Boolean.
    required: false
    type: bool
  custom_remediation_actions_enabled:
    description: Controls whether to use the action ActiveActions recommends when malware
    is detected. Set to true to use the action ActiveAction recommends.
    required: false
    type: bool
  custom_scan_actions_enabled:
    description: Controls whether to use custom actions. Use true to enable custom actions.
    required: false
    type: bool	
  scan_action_for_virus:
    description: The action to perform when a virus is detected. Searchable as Choice.
    required: false
    choices: ["pass", "delete", "quarantine", "clean", "deny-access"]
    type: str
  scan_action_for_trojans:
    description: The action to perform when a trojan is detected. Searchable as Choice.
    required: false
    choices: ["pass", "delete", "quarantine", "deny-access"]
    type: str
  scan_action_for_packer:
    description: The action to perform when a packer is detected. Searchable as Choice.
    required: false
    choices: ["pass", "delete", "quarantine", "deny-access"]
    type: str
  scan_action_for_spyware:
    description: The action to perform when spyware is detected. Searchable as Choice.
    required: false
    choices: ["pass", "delete", "quarantine", "deny-access"]
    type: str
  scan_action_for_other_threats:
    description: The action to take when other threats are detected. Searchable as Choice.
    required: false
    choices: ["pass", "delete", "quarantine", "clean", "deny-access"]
    type: str
  scan_action_for_cookies:
    description: The action to take when cookies are detected. Searchable as Choice.
    required: false
    choices: ["pass", "delete"]
    type: str
  scan_action_for_cve:
    description: The action to take when a CVE exploit is detected. Searchable as Choice.
    required: false
    choices: ["pass", "delete", "quarantine", "deny-access"]
    type: str
  scan_action_for_heuristics:
    description: The action to take when malware identified with heuristics are detected.
    Searchable as Choice.
    required: false
    choices: ["pass", "delete", "quarantine", "deny-access"]
    type: str
  scan_action_for_possible_malware:
    description: The action to take when possible malware is detected. Searchable as Choice.
    Searchable as Choice.
    required: false
    choices: ["active-action", "pass", "delete", "quarantine", "deny-access"]
    type: str
  cpu_usage:
    description: CPU usage.
    Searchable as Choice.
    required: false
    choices: ["low", "medium", "high" ]
    type: str
state:
  description:
  - The state the configuration should be left in
  type: str
  choices:
  - present
  - absent
  default: present

author: Ansible Security Automation Team (@justjais) <https://github.com/ansible-security>"
"""


# FIXME - provide correct example here
RETURN = """
"""

EXAMPLES = """
"""

from ansible.module_utils.basic import AnsibleModule
from ansible.module_utils._text import to_text

from ansible.module_utils.urls import Request
from ansible.module_utils.six.moves.urllib.parse import quote
from ansible.module_utils.six.moves.urllib.error import HTTPError
from ansible_collections.trendmicro.deepsec.plugins.module_utils.deepsec import (
    DeepSecurityRequest,
    check_if_config_exists,
    delete_config_with_id,
)
from ansible_collections.ansible.netcommon.plugins.module_utils.network.common.utils import (
    remove_empties,
)
import copy
import json


def map_params_to_obj(module_params):
    obj = {}
    obj["name"] = module_params["name"]
    if module_params.get("description"):
        obj["description"] = module_params.get("description")
    if module_params.get("scan_type"):
        obj["scanType"] = module_params.get("scan_type")
    if module_params.get("document_exploit_protection_enabled"):
        obj["documentExploitProtectionEnabled"] = module_params.get(
            "document_exploit_protection_enabled"
        )
    if module_params.get("document_exploit_protection"):
        obj["documentExploitProtection"] = module_params.get(
            "document_exploit_protection"
        )
    if module_params.get("document_exploit_heuristic_level"):
        obj["documentExploitHeuristicLevel"] = module_params.get(
            "document_exploit_heuristic_level"
        )
    if module_params.get("machine_learning_enabled"):
        obj["machineLearningEnabled"] = module_params.get(
            "machine_learning_enabled"
        )
    if module_params.get("behavior_monitoring_enabled"):
        obj["behaviorMonitoringEnabled"] = module_params.get(
            "behavior_monitoring_enabled"
        )
    if module_params.get("document_recovery_enabled"):
        obj["documentRecoveryEnabled"] = module_params.get(
            "document_recovery_enabled"
        )
    if module_params.get("intelli_trap_enabled"):
        obj["intelliTrapEnabled"] = module_params.get("intelli_trap_enabled")
    if module_params.get("memory_scan_enabled"):
        obj["memoryScanEnabled"] = module_params.get("memory_scan_enabled")
    if module_params.get("spyware_enabled"):
        obj["spywareEnabled"] = module_params.get("spyware_enabled")
    if module_params.get("alert_enabled"):
        obj["alertEnabled"] = module_params.get("alert_enabled")
    if module_params.get("directories_to_scan"):
        obj["directoriesToScan"] = module_params.get("directories_to_scan")
    if module_params.get("directory_list_id"):
        obj["directoryListID"] = module_params.get("directory_list_id")
    if module_params.get("files_to_scan"):
        obj["filesToScan"] = module_params.get("files_to_scan")
    if module_params.get("file_extension_list_id"):
        obj["fileExtensionListID"] = module_params.get(
            "file_extension_list_id"
        )
    if module_params.get("excluded_directory_list_id"):
        obj["excludedDirectoryListID"] = module_params.get(
            "excluded_directory_list_id"
        )
    if module_params.get("excluded_file_list_id"):
        obj["excludedFileListID"] = module_params.get("excluded_file_list_id")
    if module_params.get("excluded_file_extension_list_id"):
        obj["excludedFileExtensionListID"] = module_params.get(
            "excluded_file_extension_list_id"
        )
    if module_params.get("excluded_process_image_file_list_id"):
        obj["excludedProcessImageFileListID"] = module_params.get(
            "excluded_process_image_file_list_id"
        )
    if module_params.get("real_time_scan"):
        obj["realTimeScan"] = module_params.get("real_time_scan")
    if module_params.get("scan_compressed_enabled"):
        obj["scanCompressedEnabled"] = module_params.get(
            "scan_compressed_enabled"
        )
    if module_params.get("scan_compressed_maximum_size"):
        obj["scanCompressedMaximumSize"] = module_params.get(
            "scan_compressed_maximum_size"
        )
    if module_params.get("scan_compressed_maximum_levels"):
        obj["scanCompressedMaximumLevels"] = module_params.get(
            "scan_compressed_maximum_levels"
        )
    if module_params.get("scan_compressed_maximum_files"):
        obj["scanCompressedMaximumFiles"] = module_params.get(
            "scan_compressed_maximum_files"
        )
    if module_params.get("microsoft_office_enabled"):
        obj["microsoftOfficeEnabled"] = module_params.get(
            "microsoft_office_enabled"
        )
    if module_params.get("microsoft_office_layers"):
        obj["microsoftOfficeLayers"] = module_params.get(
            "microsoft_office_layers"
        )
    if module_params.get("network_directories_enabled"):
        obj["networkDirectoriesEnabled"] = module_params.get(
            "network_directories_enabled"
        )
    if module_params.get("custom_remediation_actions_enabled"):
        obj["customRemediationActionsEnabled"] = module_params.get(
            "custom_remediation_actions_enabled"
        )
    if module_params.get("custom_scan_actions_enabled"):
        obj["customScanActionsEnabled"] = module_params.get(
            "custom_scan_actions_enabled"
        )
    if module_params.get("scan_action_for_virus"):
        obj["scanActionForVirus"] = module_params.get("scan_action_for_virus")
    if module_params.get("scan_action_for_trojans"):
        obj["scanActionForTrojans"] = module_params.get(
            "scan_action_for_trojans"
        )
    if module_params.get("scan_action_for_packer"):
        obj["scanActionForPacker"] = module_params.get(
            "scan_action_for_packer"
        )
    if module_params.get("scan_action_for_spyware"):
        obj["scanActionForSpyware"] = module_params.get(
            "scan_action_for_spyware"
        )
    if module_params.get("scan_action_for_other_threats"):
        obj["scanActionForOtherThreats"] = module_params.get(
            "scan_action_for_other_threats"
        )
    if module_params.get("scan_action_for_cookies"):
        obj["scanActionForCookies"] = module_params.get(
            "scan_action_for_cookies"
        )
    if module_params.get("scan_action_for_cve"):
        obj["scanActionForCVE"] = module_params.get("scan_action_for_cve")
    if module_params.get("scan_action_for_heuristics"):
        obj["scanActionForHeuristics"] = module_params.get(
            "scan_action_for_heuristics"
        )
    if module_params.get("scan_action_for_possible_malware"):
        obj["scanActionForPossibleMalware"] = module_params.get(
            "scan_action_for_possible_malware"
        )
    if module_params.get("cpu_usage"):
        obj["cpuUsage"] = module_params.get("cpu_usage")
    return obj


def main():

    argspec = dict(
        state=dict(choices=["present", "absent"], required=True),
        name=dict(required=True, type="str"),
        description=dict(type="str", required=False),
        scan_type=dict(type="str", choices=["real-time", "on-demand"]),
        document_exploit_protection_enabled=dict(type="bool", required=False),
        document_exploit_protection=dict(
            type="str", choices=["critical-only", "critical-and-heuristic"]
        ),
        document_exploit_heuristic_level=dict(
            type="str", choices=["default", "default-and-agressive"]
        ),
        machine_learning_enabled=dict(type="bool", required=False),
        behavior_monitoring_enabled=dict(type="bool", required=False),
        document_recovery_enabled=dict(type="bool", required=False),
        intelli_trap_enabled=dict(type="bool", required=False),
        memory_scan_enabled=dict(type="bool", required=False),
        spyware_enabled=dict(type="bool", required=False),
        alert_enabled=dict(type="bool", required=False),
        directories_to_scan=dict(
            type="str", choices=["all-directories", "directory-list"]
        ),
        directory_list_id=dict(type="int", required=False),
        files_to_scan=dict(
            type="str",
            choices=[
                "all-files",
                "intelliscan-file-types",
                "file-extension-list",
            ],
        ),
        file_extension_list_id=dict(type="int", required=False),
        excluded_directory_list_id=dict(type="int", required=False),
        excluded_file_list_id=dict(type="int", required=False),
        excluded_file_extension_list_id=dict(type="int", required=False),
        excluded_process_image_file_list_id=dict(type="int", required=False),
        real_time_scan=dict(
            type="str", choices=["read-only", "write-only", "read-write"]
        ),
        scan_compressed_enabled=dict(type="int", required=False),
        scan_compressed_maximum_size=dict(type="int", required=False),
        scan_compressed_maximum_levels=dict(type="int", required=False),
        scan_compressed_maximum_files=dict(type="int", required=False),
        microsoft_office_enabled=dict(type="bool", required=False),
        microsoft_office_layers=dict(type="int", required=False),
        network_directories_enabled=dict(type="bool", required=False),
        custom_remediation_actions_enabled=dict(type="bool", required=False),
        custom_scan_actions_enabled=dict(type="bool", required=False),
        scan_action_for_virus=dict(
            type="str",
            choices=["pass", "delete", "quarantine", "clean", "deny-access"],
        ),
        scan_action_for_trojans=dict(
            type="str", choices=["pass", "delete", "quarantine", "deny-access"]
        ),
        scan_action_for_packer=dict(
            type="str", choices=["pass", "delete", "quarantine", "deny-access"]
        ),
        scan_action_for_spyware=dict(
            type="str", choices=["pass", "delete", "quarantine", "deny-access"]
        ),
        scan_action_for_other_threats=dict(
            type="str",
            choices=["pass", "delete", "quarantine", "clean", "deny-access"],
        ),
        scan_action_for_cookies=dict(type="str", choices=["pass", "delete"]),
        scan_action_for_cve=dict(
            type="str", choices=["pass", "delete", "quarantine", "deny-access"]
        ),
        scan_action_for_heuristics=dict(
            type="str", choices=["pass", "delete", "quarantine", "deny-access"]
        ),
        scan_action_for_possible_malware=dict(
            type="str", choices=["pass", "delete", "quarantine", "deny-access"]
        ),
        cpu_usage=dict(type="str", choices=["low", "medium", "high"]),
    )

    module = AnsibleModule(argument_spec=argspec, supports_check_mode=True)
    deepsec_request = DeepSecurityRequest(module)
    want = map_params_to_obj(remove_empties(module.params))

    search_existing_anti_malware_config = check_if_config_exists(
        deepsec_request,
        want["name"],
        "antimalwareconfigurations",
        "antiMalwareConfigurations",
    )

    if (
        "ID" in search_existing_anti_malware_config
        and module.params["state"] == "absent"
    ):
        delete_config_with_id(
            module,
            deepsec_request,
            antimalwareconfigurations,
            search_existing_anti_malware_config["ID"],
            "antiMalwareConfigurations",
        )
    elif (
        "ID" not in search_existing_anti_malware_config
        and module.params["state"] == "absent"
    ):
        module.exit_json(changed=False)
    else:
        anti_malware_config = deepsec_request.post(
            "/api/antimalwareconfigurations", data=want
        )
        if "ID" in search_existing_anti_malware_config:
            module.exit_json(
                anti_malware_config=search_existing_anti_malware_config,
                changed=False,
            )
        elif anti_malware_config.get("message"):
            module.fail_json(msg=anti_malware_config["message"])
        else:
            module.exit_json(
                anti_malware_config=anti_malware_config, changed=True
            )
    module.exit_json(changed=False)


if __name__ == "__main__":
    main()
