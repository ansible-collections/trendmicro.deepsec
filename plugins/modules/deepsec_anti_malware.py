#!/usr/bin/python
# -*- coding: utf-8 -*-
# Copyright 2020 Red Hat
# GNU General Public License v3.0+
# (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

from __future__ import absolute_import, division, print_function

__metaclass__ = type


DOCUMENTATION = """
---
module: deepsec_anti_malware
short_description: Create a new antimalware under TrendMicro Deep Security Policy
description:
  - This module creates a new antimalware under TrendMicro Deep Security
version_added: 1.0.0
options:
  name:
    description: Name of the anti-malware configuration. Searchable as String.
    required: true
    type: str
  description:
    description: Description of the anti-malware configuration. Searchable as String.
    type: str
  scan_type:
    description: The type of malware scan configuration. Searchable as Choice.
    choices: ["real-time", "on-demand"]
    type: str
  document_exploit_protection_enabled:
    description: Controls whether to scan for known critical vulnerabilities. Use true to enable scan.
    type: bool
  document_exploit_protection:
    description: Scan for exploits against known critical vulnerabilities only. Searchable as Choice.
    choices: ["critical-only", "critical-and-heuristic"]
    type: str
  document_exploit_heuristic_level:
    description:
      - Controls whether to scan for exploits of known critical vulnerabilites as well as
        aggessively detect suspicious behaviour that could be an unknown exploit.
      - Searchable as Choice.
    choices: ["default", "default-and-agressive"]
    type: str
  machine_learning_enabled:
    description:
      - Controls whether predictive machine learning is enabled. Set to true to enable.
      - Searchable as Boolean.
    type: bool
  behavior_monitoring_enabled:
    description:
      - Controls whether to detect suspicious activity and unauthorized changes
        (including ransomware). Set to true to detect.
      - Searchable as Boolean.
    type: bool
  document_recovery_enabled:
    description:
      - Controls whether to back up ransomware-encrypted files. Set to true to back up.
      - Searchable as Boolean.
    type: bool
  intelli_trap_enabled:
    description: Controls whether IntelliTrap is enabled. Set to true to enable. Searchable as Boolean.
    type: bool
  memory_scan_enabled:
    description:
      - Controls whether to scan process memory for malware. Use true to enable scan.
      - Searchable as Boolean.
    type: bool
  spyware_enabled:
    description:
      - Controls whether to enable spyware/grayware protection. Set to true to enable.
      - Searchable as Boolean.
    type: bool
  alert_enabled:
    description:
      - Controls whether to create an alert when the Malware Scan Configuration logs an event.
        Set to true to enable the alert.
      - Searchable as Boolean.
    type: bool
  directories_to_scan:
    description:
      - Specify if the scan will be peformed on all the directories or on a subset.
      - Searchable as Choice.
    choices: ["all-directories", "directory-list"]
    type: str
  directory_list_id:
    description: ID of the directory list to scan. Searchable as Numeric.
    type: int
  files_to_scan:
    description:
      - Specify if scan will be performed on all files, a subset or by using IntelliScan.
      - Searchable as Choice.
    choices: ["all-files", "intelliscan-file-types", "file-extension-list"]
    type: str
  file_extension_list_id:
    description: ID of the file extension list to scan. Searchable as Numeric.
    type: int
  excluded_directory_list_id:
    description: ID of the directory list to exclude from the scan. Searchable as Numeric.
    type: int
  excluded_file_list_id:
    description: ID of the file list to exclude from the scan. Searchable as Numeric.
    type: int
  excluded_file_extension_list_id:
    description: ID of the file extension list to exclude from the scan. Searchable as Numeric.
    type: int
  excluded_process_image_file_list_id:
    description: ID of the process image file list to exclude from the scan. Searchable as Numeric.
    type: int
  real_time_scan:
    description: Specify when to perform the real-time scan. Searchable as Choice.
    choices: ["read-only", "write-only", "read-write"]
    type: str
  scan_compressed_enabled:
    description:
      - Controls whether to scan compressed files. Use true to enable scan.
      - Searchable as Boolean.
    type: bool
  scan_compressed_maximum_size:
    description: Maximum size of compressed files to scan, in MB. Searchable as Numeric.
    type: int
  scan_compressed_maximum_levels:
    description: The maximum number of levels of compression to scan. Searchable as Numeric.
    type: int
  scan_compressed_maximum_files:
    description: Maximum number of files to extract. Searchable as Numeric.
    type: int
  microsoft_office_enabled:
    description:
      - Controls whether to scan Embedded Microsoft Office Objects. Use true to enable scan.
      - Searchable as Boolean.
    type: bool
  microsoft_office_layers:
    description:
      - Number of Microsoft Object Linking and Embedding (OLE) Layers to scan.
      - Searchable as Numeric.
    type: int
  network_directories_enabled:
    description:
      - Controls whether to scan network directories. Set to true to enable.
      - Searchable as Boolean.
    type: bool
  custom_remediation_actions_enabled:
    description: Controls whether to use the action ActiveActions recommends when malware
      is detected. Set to true to use the action ActiveAction recommends.
    type: bool
  custom_scan_actions_enabled:
    description: Controls whether to use custom actions. Use true to enable custom actions.
    type: bool
  scan_action_for_virus:
    description: The action to perform when a virus is detected. Searchable as Choice.s
    choices: ["pass", "delete", "quarantine", "clean", "deny-access"]
    type: str
  scan_action_for_trojans:
    description: The action to perform when a trojan is detected. Searchable as Choice.
    choices: ["pass", "delete", "quarantine", "deny-access"]
    type: str
  scan_action_for_packer:
    description: The action to perform when a packer is detected. Searchable as Choice.
    choices: ["pass", "delete", "quarantine", "deny-access"]
    type: str
  scan_action_for_spyware:
    description: The action to perform when spyware is detected. Searchable as Choice.
    choices: ["pass", "delete", "quarantine", "deny-access"]
    type: str
  scan_action_for_other_threats:
    description: The action to take when other threats are detected. Searchable as Choice.
    choices: ["pass", "delete", "quarantine", "clean", "deny-access"]
    type: str
  scan_action_for_cookies:
    description: The action to take when cookies are detected. Searchable as Choice.
    choices: ["pass", "delete"]
    type: str
  scan_action_for_cve:
    description: The action to take when a CVE exploit is detected. Searchable as Choice.
    choices: ["pass", "delete", "quarantine", "deny-access"]
    type: str
  scan_action_for_heuristics:
    description:
      - The action to take when malware identified with heuristics are detected.
      - Searchable as Choice.
    choices: ["pass", "delete", "quarantine", "deny-access"]
    type: str
  scan_action_for_possible_malware:
    description: The action to take when possible malware is detected. Searchable as Choice.
    choices: ["active-action", "pass", "delete", "quarantine", "deny-access"]
    type: str
  cpu_usage:
    description: CPU usage. Searchable as Choice.
    choices: ["low", "medium", "high" ]
    type: str
  state:
    description:
    - The state the configuration should be left in
    type: str
    choices:
    - present
    - absent
    default: present

author: Ansible Security Automation Team (@justjais) <https://github.com/ansible-security>"
"""

EXAMPLES = """
- name: Create/Config a new Anti Malware config
  trendmicro.deepsec.deepsec_anti_malware:
    name: test_malware
    description: test malware config
    scan_action_for_virus: pass
    alert_enabled: true
    scan_type: real-time
    real_time_scan: read-write
    cpu_usage: low
    state: present

- name: Delete/Remove the existing Anti Malware Config
  trendmicro.deepsec.deepsec_anti_malware:
    state: absent
    name: test_malware
"""

from ansible.module_utils.six import iteritems
from ansible.module_utils.basic import AnsibleModule

from ansible_collections.trendmicro.deepsec.plugins.module_utils.deepsec import (
    DeepSecurityRequest,
    check_if_config_exists,
    delete_config_with_id,
)
from ansible_collections.ansible.netcommon.plugins.module_utils.network.common.utils import (
    remove_empties,
)

key_transform = {
    "scan_type": "scanType",
    "document_exploit_protection_enabled": "documentExploitProtectionEnabled",
    "document_exploit_protection": "documentExploitProtection",
    "document_exploit_heuristic_level": "documentExploitHeuristicLevel",
    "machine_learning_enabled": "machineLearningEnabled",
    "behavior_monitoring_enabled": "behaviorMonitoringEnabled",
    "document_recovery_enabled": "documentRecoveryEnabled",
    "intelli_trap_enabled": "intelliTrapEnabled",
    "memory_scan_enabled": "memoryScanEnabled",
    "spyware_enabled": "spywareEnabled",
    "alert_enabled": "alertEnabled",
    "directories_to_scan": "directoriesToScan",
    "directory_list_id": "directoryListID",
    "files_to_scan": "filesToScan",
    "excluded_directory_list_id": "excludedDirectoryListID",
    "excluded_file_list_id": "excludedFileListID",
    "excluded_file_extension_list_id": "fileExtensionListID",
    "excluded_process_image_file_list_id": "excludedProcessImageFileListID",
    "real_time_scan": "realTimeScan",
    "scan_compressed_enabled": "scanCompressedEnabled",
    "scan_compressed_maximum_size": "scanCompressedMaximumSize",
    "scan_compressed_maximum_levels": "scanCompressedMaximumLevels",
    "scan_compressed_maximum_files": "scanCompressedMaximumFiles",
    "microsoft_office_enabled": "microsoftOfficeEnabled",
    "microsoft_office_layers": "microsoftOfficeLayers",
    "network_directories_enabled": "networkDirectoriesEnabled",
    "custom_remediation_actions_enabled": "customRemediationActionsEnabled",
    "custom_scan_actions_enabled": "customScanActionsEnabled",
    "scan_action_for_virus": "scanActionForVirus",
    "scan_action_for_trojans": "scanActionForTrojans",
    "scan_action_for_packer": "scanActionForPacker",
    "scan_action_for_spyware": "scanActionForSpyware",
    "scan_action_for_other_threats": "scanActionForOtherThreats",
    "scan_action_for_cookies": "scanActionForCookies",
    "scan_action_for_cve": "scanActionForCVE",
    "scan_action_for_heuristics": "scanActionForHeuristics",
    "scan_action_for_possible_malware": "scanActionForPossibleMalware",
    "cpu_usage": "cpuUsage",
}


def map_params_to_obj(module_params):
    obj = {}
    obj["name"] = module_params["name"]
    if module_params.get("description"):
        obj["description"] = module_params.get("description")
    for k, v in iteritems(key_transform):
        if module_params.get(k):
            obj[v] = module_params.get(k)
    return obj


def main():

    argspec = dict(
        state=dict(choices=["present", "absent"], default="present"),
        name=dict(required=True, type="str"),
        description=dict(type="str"),
        scan_type=dict(type="str", choices=["real-time", "on-demand"]),
        document_exploit_protection_enabled=dict(type="bool"),
        document_exploit_protection=dict(
            type="str", choices=["critical-only", "critical-and-heuristic"]
        ),
        document_exploit_heuristic_level=dict(
            type="str", choices=["default", "default-and-agressive"]
        ),
        machine_learning_enabled=dict(type="bool"),
        behavior_monitoring_enabled=dict(type="bool"),
        document_recovery_enabled=dict(type="bool"),
        intelli_trap_enabled=dict(type="bool"),
        memory_scan_enabled=dict(type="bool"),
        spyware_enabled=dict(type="bool"),
        alert_enabled=dict(type="bool"),
        directories_to_scan=dict(
            type="str", choices=["all-directories", "directory-list"]
        ),
        directory_list_id=dict(type="int"),
        files_to_scan=dict(
            type="str",
            choices=[
                "all-files",
                "intelliscan-file-types",
                "file-extension-list",
            ],
        ),
        file_extension_list_id=dict(type="int"),
        excluded_directory_list_id=dict(type="int"),
        excluded_file_list_id=dict(type="int"),
        excluded_file_extension_list_id=dict(type="int"),
        excluded_process_image_file_list_id=dict(type="int"),
        real_time_scan=dict(
            type="str", choices=["read-only", "write-only", "read-write"]
        ),
        scan_compressed_enabled=dict(type="bool"),
        scan_compressed_maximum_size=dict(type="int"),
        scan_compressed_maximum_levels=dict(type="int"),
        scan_compressed_maximum_files=dict(type="int"),
        microsoft_office_enabled=dict(type="bool"),
        microsoft_office_layers=dict(type="int"),
        network_directories_enabled=dict(type="bool"),
        custom_remediation_actions_enabled=dict(type="bool"),
        custom_scan_actions_enabled=dict(type="bool"),
        scan_action_for_virus=dict(
            type="str",
            choices=["pass", "delete", "quarantine", "clean", "deny-access"],
        ),
        scan_action_for_trojans=dict(
            type="str", choices=["pass", "delete", "quarantine", "deny-access"]
        ),
        scan_action_for_packer=dict(
            type="str", choices=["pass", "delete", "quarantine", "deny-access"]
        ),
        scan_action_for_spyware=dict(
            type="str", choices=["pass", "delete", "quarantine", "deny-access"]
        ),
        scan_action_for_other_threats=dict(
            type="str",
            choices=["pass", "delete", "quarantine", "clean", "deny-access"],
        ),
        scan_action_for_cookies=dict(type="str", choices=["pass", "delete"]),
        scan_action_for_cve=dict(
            type="str", choices=["pass", "delete", "quarantine", "deny-access"]
        ),
        scan_action_for_heuristics=dict(
            type="str", choices=["pass", "delete", "quarantine", "deny-access"]
        ),
        scan_action_for_possible_malware=dict(
            type="str",
            choices=[
                "active-action",
                "pass",
                "delete",
                "quarantine",
                "deny-access",
            ],
        ),
        cpu_usage=dict(type="str", choices=["low", "medium", "high"]),
    )

    module = AnsibleModule(argument_spec=argspec, supports_check_mode=True)
    deepsec_request = DeepSecurityRequest(module)
    want = map_params_to_obj(remove_empties(module.params))
    # Search for existing Anti Malware config via Get call
    search_existing_anti_malware_config = check_if_config_exists(
        deepsec_request,
        want["name"],
        "antimalwareconfigurations",
        "antiMalwareConfigurations",
    )

    if (
        "ID" in search_existing_anti_malware_config
        and module.params["state"] == "absent"
    ):
        delete_config_with_id(
            module,
            deepsec_request,
            "antimalwareconfigurations",
            search_existing_anti_malware_config["ID"],
            "antiMalwareConfigurations",
            handle_return=True,
        )
    elif (
        "ID" not in search_existing_anti_malware_config
        and module.params["state"] == "absent"
    ):
        module.exit_json(changed=False)
    else:
        anti_malware_config = deepsec_request.post(
            "/api/antimalwareconfigurations", data=want
        )
        if "ID" in search_existing_anti_malware_config:
            module.exit_json(
                anti_malware_config=search_existing_anti_malware_config,
                changed=False,
            )
        elif anti_malware_config.get("message"):
            module.fail_json(msg=anti_malware_config["message"])
        else:
            module.exit_json(
                anti_malware_config=anti_malware_config, changed=True
            )
    module.exit_json(changed=False)


if __name__ == "__main__":
    main()
