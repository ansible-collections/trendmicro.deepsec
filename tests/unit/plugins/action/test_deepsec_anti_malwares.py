# Copyright (c) 2022 Red Hat
#
# This file is part of Ansible
#
# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.
#

from __future__ import absolute_import, division, print_function


__metaclass__ = type

import tempfile
import unittest

from ansible.playbook.task import Task
from ansible.template import Templar
from ansible_collections.ansible.utils.tests.unit.compat.mock import MagicMock, patch

from ansible_collections.trendmicro.deepsec.plugins.action.deepsec_anti_malwares import ActionModule


RESPONSE_PAYLOAD = {
    "anti_malwares": [
        {
            "alert_enabled": True,
            "amsi_scan_enabled": True,
            "behavior_monitoring_enabled": False,
            "cpu_usage": "low",
            "custom_remediation_actions_enabled": False,
            "description": "test malware 2 description",
            "directories_to_scan": "all-directories",
            "document_exploit_heuristic_level": "default",
            "document_exploit_protection": "critical-only",
            "document_exploit_protection_enabled": True,
            "files_to_scan": "all-files",
            "id": "48",
            "intelli_trap_enabled": False,
            "machine_learning_enabled": True,
            "memory_scan_enabled": False,
            "microsoft_office_enabled": True,
            "microsoft_office_layers": "3",
            "name": "test_malware_2",
            "network_directories_enabled": False,
            "real_time_scan": "read-write",
            "scan_action_for_machine_learning": "pass",
            "scan_compressed_enabled": False,
            "scan_type": "real-time",
            "spyware_enabled": True,
        },
    ],
}

REQUEST_PAYLOAD = [
    {
        "name": "test_malware_1",
        "description": "test malware 1 description",
        "scan_action_for_virus": "pass",
        "alert_enabled": "true",
        "scan_type": "on-demand",
        "real_time_scan": "read-only",
        "cpu_usage": "medium",
    },
    {
        "name": "test_malware_2",
        "description": "test malware 2 description",
        "scan_action_for_virus": "pass",
        "alert_enabled": "true",
        "scan_type": "real-time",
        "real_time_scan": "read-write",
        "cpu_usage": "low",
    },
]


class TestDeepsecFirewallRules(unittest.TestCase):
    def setUp(self):
        task = MagicMock(Task)
        # Ansible > 2.13 looks for check_mode in task
        task.check_mode = False
        play_context = MagicMock()
        # Ansible <= 2.13 looks for check_mode in play_context
        play_context.check_mode = False
        connection = patch(
            "ansible_collections.trendmicro.deepsec.plugins.action.deepsec_anti_malwares.Connection",
        )
        fake_loader = {}
        templar = Templar(loader=fake_loader)
        self._plugin = ActionModule(
            task=task,
            connection=connection,
            play_context=play_context,
            loader=fake_loader,
            templar=templar,
            shared_loader_obj=None,
        )
        self._plugin._task.action = "anti_malwares"
        self._plugin.api_return = "anti_malwares"
        self._task_vars = {}

    @patch("ansible.module_utils.connection.Connection.__rpc__")
    def test_deepsec_anti_malwares_merged(self, connection):
        self._plugin.search_for_resource_name = MagicMock()
        self._plugin.search_for_resource_name.return_value = {}
        self._plugin._connection.socket_path = tempfile.NamedTemporaryFile().name
        self._plugin._connection._shell = MagicMock()
        self._plugin._task.args = {
            "state": "merged",
            "config": REQUEST_PAYLOAD,
        }
        result = self._plugin.run(task_vars=self._task_vars)
        self.assertTrue(result["changed"])

    @patch("ansible.module_utils.connection.Connection.__rpc__")
    def test_deepsec_anti_malwares_merged_idempotent(self, connection):
        self._plugin._connection.socket_path = tempfile.NamedTemporaryFile().name
        self._plugin._connection._shell = MagicMock()
        self._plugin.search_for_resource_name = MagicMock()
        self._plugin.search_for_resource_name.return_value = RESPONSE_PAYLOAD

        self._plugin._task.args = {
            "state": "merged",
            "config": [
                {
                    "name": "test_malware_1",
                    "description": "test malware 1 description",
                    "scan_action_for_virus": "pass",
                    "alert_enabled": "true",
                    "scan_type": "on-demand",
                    "real_time_scan": "read-only",
                    "cpu_usage": "medium",
                },
            ],
        }
        result = self._plugin.run(task_vars=self._task_vars)
        self.assertFalse(result["changed"])

    @patch("ansible.module_utils.connection.Connection.__rpc__")
    def test_deepsec_anti_malwares_replaced(self, connection):
        self._plugin._connection.socket_path = tempfile.NamedTemporaryFile().name
        self._plugin._connection._shell = MagicMock()
        self._plugin.search_for_resource_name = MagicMock()
        self._plugin.search_for_resource_name.return_value = RESPONSE_PAYLOAD
        self._plugin._task.args = {
            "state": "replaced",
            "config": [
                {
                    "name": "test_malware_2",
                    "description": "Replace test malware 2 description",
                    "scan_action_for_virus": "quarantine",
                    "alert_enabled": True,
                    "files_to_scan": "intelliscan-file-types",
                    "scan_type": "real-time",
                    "real_time_scan": "read-only",
                    "cpu_usage": "medium",
                },
            ],
        }
        result = self._plugin.run(task_vars=self._task_vars)
        self.assertTrue(result["changed"])

    @patch("ansible.module_utils.connection.Connection.__rpc__")
    def test_deepsec_anti_malwares_replaced_idempotent(self, connection):
        self._plugin._connection.socket_path = tempfile.NamedTemporaryFile().name
        self._plugin._connection._shell = MagicMock()
        self._plugin.search_for_resource_name = MagicMock()
        self._plugin.search_for_resource_name.return_value = {
            self._plugin.api_return: [
                {
                    "alert_enabled": True,
                    "amsi_scan_enabled": True,
                    "behavior_monitoring_enabled": False,
                    "custom_remediation_actions_enabled": False,
                    "cpu_usage": "medium",
                    "description": "Replace test malware 2 description",
                    "directories_to_scan": "all-directories",
                    "document_exploit_heuristic_level": "default",
                    "document_exploit_protection": "critical-only",
                    "document_exploit_protection_enabled": True,
                    "files_to_scan": "intelliscan-file-types",
                    "id": "48",
                    "intelli_trap_enabled": False,
                    "machine_learning_enabled": True,
                    "memory_scan_enabled": False,
                    "microsoft_office_enabled": True,
                    "microsoft_office_layers": "3",
                    "name": "test_malware_2",
                    "network_directories_enabled": False,
                    "real_time_scan": "read-only",
                    "scan_action_for_machine_learning": "pass",
                    "scan_compressed_enabled": False,
                    "scan_type": "real-time",
                    "spyware_enabled": True,
                    "scan_action_for_virus": "quarantine",
                },
            ],
        }
        self._plugin._task.args = {
            "state": "replaced",
            "config": [
                {
                    "name": "test_malware_2",
                    "description": "Replace test malware 2 description",
                    "scan_action_for_virus": "quarantine",
                    "alert_enabled": True,
                    "files_to_scan": "intelliscan-file-types",
                    "scan_type": "real-time",
                    "real_time_scan": "read-only",
                    "cpu_usage": "medium",
                },
            ],
        }
        result = self._plugin.run(task_vars=self._task_vars)
        self.assertFalse(result["changed"])

    @patch("ansible.module_utils.connection.Connection.__rpc__")
    def test_deepsec_anti_malwares_deleted(self, connection):
        self._plugin._connection.socket_path = tempfile.NamedTemporaryFile().name
        self._plugin._connection._shell = MagicMock()
        self._plugin.search_for_resource_name = MagicMock()
        self._plugin.search_for_resource_name.return_value = RESPONSE_PAYLOAD
        self._plugin._task.args = {
            "state": "deleted",
            "config": [
                {
                    "name": "test_malware_2",
                },
            ],
        }
        result = self._plugin.run(task_vars=self._task_vars)
        self.assertTrue(result["changed"])

    @patch("ansible.module_utils.connection.Connection.__rpc__")
    def test_deepsec_anti_malwares_deleted_idempotent(self, connection):
        self._plugin.search_for_resource_name = MagicMock()
        self._plugin.search_for_resource_name.return_value = {}
        self._plugin._connection.socket_path = tempfile.NamedTemporaryFile().name
        self._plugin._connection._shell = MagicMock()
        self._plugin._task.args = {
            "state": "deleted",
            "config": [
                {
                    "name": "test_malware_2",
                },
            ],
        }
        result = self._plugin.run(task_vars=self._task_vars)
        self.assertFalse(result["changed"])

    @patch("ansible.module_utils.connection.Connection.__rpc__")
    def test_deepsec_anti_malwares_gathered(self, connection):
        self._plugin._connection.socket_path = tempfile.NamedTemporaryFile().name
        self._plugin._connection._shell = MagicMock()
        self._plugin.search_for_resource_name = MagicMock()
        self._plugin.search_for_resource_name.return_value = RESPONSE_PAYLOAD
        self._plugin._task.args = {
            "state": "gathered",
            "config": [{"name": "test_malware_2"}],
        }
        result = self._plugin.run(task_vars=self._task_vars)
        self.assertFalse(result["changed"])
